<HTML>
<HEAD>
<title>PCI</title>
</HEAD>

<body>
<H1><CENTER>PCI</center></h1>
<h3><center>the first part of the seventh chapter in our series 
on <i>How to Write an Operating System</i></center></h3>

<hr>

<h2>PCI</h2>

<H3>Overview</H3>
A friend once said that "hardware engineers live to make software engineers
lives hell."  PCI is on of the exceptions that actually works in a usefull
manner.  In most architecture the PCI bridge handles most everything such
as Memory Mapped IO, DMA, and I/O ports it you are on a PC.  All that you
don't have to worry too much about except for configuring it.<p>

<p>PCI, also, provides an intellegent configuration mechanism.  Each device
has either 64 or 256 bytes of configuration space.  The 64 bytes are a standard
header format.  The last 192 bytes are left for device specific configureation.
By the time your OS boot the BIOS/Firmware will have set most of the important
information such as IRQ and IO address.  Your OS need only read these values
and start using them.  Thats right no jumpers.  No probing.  Does it get any
better than this?</p>

<H3>Config Header</H3>
<TABLE BORDER>
<TR>
	<TD>Index</TD>
	<TD BORDER=0 WIDTH="25%" ALIGN="LEFT">31</TD>
	<TD BORDER=0 WIDTH="25%" ALIGN="RIGHT">16</TD>
	<TD BORDER=0 WIDTH="25%" ALIGN="LEFT">15</TD>
	<TD BORDER=0 WIDTH="25%" ALIGN="RIGHT">0</TD>
</TR>
<TR><TD>0x00</TD>
	<TD COLSPAN="2"><CENTER>Device ID</CENTER></TD>
	<TD COLSPAN="2"><CENTER>Vendor ID</CENTER></TD>
</TR>
<TR><TD>0x04</TD>
	<TD COLSPAN="2"><CENTER>Status</CENTER></TD>
	<TD COLSPAN="2"><CENTER>Command</CENTER></TD>
</TR>
<TR><TD>0x08</TD>
	<TD COLSPAN="3"><CENTER>Class Code</CENTER></TD>
	<TD COLSPAN="1"><CENTER>Revision</CENTER></TD>
</TR>
<TR><TD>0x0c</TD>
	<TD COLSPAN="1"><CENTER>Built In Selftest</CENTER></TD>
	<TD COLSPAN="1"><CENTER>Header</CENTER></TD>
	<TD COLSPAN="1"><CENTER>Latency</CENTER></TD>
	<TD COLSPAN="1"><CENTER>Chache Line Size</CENTER></TD>
</TR>
<TR><TD>0x10</TD>
	<TD COLSPAN="4"><CENTER>Base Address Register 0</CENTER></TD>
</TR>
<TR><TD>0x14</TD>
	<TD COLSPAN="4"><CENTER>Base Address Register 1</CENTER></TD>
</TR>
<TR><TD>0x18</TD>
	<TD COLSPAN="4"><CENTER>Base Address Register 2</CENTER></TD>
</TR>
<TR><TD>0x1c</TD>
	<TD COLSPAN="4"><CENTER>Base Address Register 3</CENTER></TD>
</TR>
<TR><TD>0x20</TD>
	<TD COLSPAN="4"><CENTER>Base Address Register 4</CENTER></TD>
</TR>
<TR><TD>0x24</TD>
	<TD COLSPAN="4"><CENTER>Base Address Register 5</CENTER></TD>
</TR>
<TR><TD>0x28</TD>
	<TD COLSPAN="4"><CENTER>Reserved</CENTER></TD>
</TR>
<TR><TD>0x2c</TD>
	<TD COLSPAN="4"><CENTER>Reserved</CENTER></TD>
</TR>
<TR><TD>0x30</TD>
	<TD COLSPAN="4"><CENTER>Expansion Rom Address</CENTER></TD>
</TR>
<TR><TD>0x34</TD>
	<TD COLSPAN="4"><CENTER>Reserved</CENTER></TD>
</TR>
<TR><TD>0x38</TD>
	<TD COLSPAN="4"><CENTER>Reserved</CENTER></TD>
</TR>
<TR><TD>0x3c</TD>
	<TD COLSPAN="1"><CENTER>Max Letency</CENTER></TD>
	<TD COLSPAN="1"><CENTER>Min Latency</CENTER></TD>
	<TD COLSPAN="1"><CENTER>Interupt Pin</CENTER></TD>
	<TD COLSPAN="1"><CENTER>IRQ Line</CENTER></TD>
</TR>
</TABLE>

<blockquote>
<DL>
<DT><B>Vendor ID</B> - 0x00
<DD><p>This is an assigned number unique to each PCI vendor.  For a somewhat 
complete list of these have a look at Linux's <A HREF="pci.h">pci.h</A>.</p>

<DT><B>Device ID</B> - 0x02
<DD><p>This is a vendor assigned number specifing which device it is.  For a 
somewhat complete list of these have a look at Linux's 
<A HREF="pci.h">pci.h</A>.</p>

<DT><B>Command</B> - 0x04
<DD><p>This is used to enable vaious types of PCI opperations</p>
	<center><table BORDER><TR>
<TD>15</TD><TD>14</TD><TD>13</TD><TD>12</TD><TD>11</TD><TD>10</TD><TD>9</TD>
	<TD>8</TD><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD>
	<TD>1</TD><TD>0</TD>
</TR><TR>
<TD COLSPAN=6>Reserved</TD></TD><TD>BBE</TD><TD>SSE</TD><TD>WC</TD><TD>PER</TD>
	<TD>VPS</TD><TD>MWI</TD><TD>SC</TD><TD>BM</TD><TD>MA</TD><TD>IO</TD></TR>
</table></center>
	<TABLE>
	<TR><TD VALIGN="TOP">BBE:</TD>
		<TD><B>Fast Back-to-back enable</B>.  Enables fast back-to-back 
			transfers during busmastering.  Only enable this if all
			devices on the bus cand do BBE</TD></TR>
	<TR><TD VALIGN="TOP">SSE:</TD>
		<TD><B>System Error Enable</B>. When set to one the devie can drive 
			the SERR# line.</TD></TR>
	<TR><TD VALIGN="TOP">WC:</TD>
		<TD><B>Wait Cycle Enable</B>.  Controls whether the device does 
			address/data steping.</TD></TR>
	<TR><TD VALIGN="TOP">PER:</TD>
		<TD><B>Parity Error Response</B>.  When set to one the device can
			report partiy errors.</TD></TR>
	<TR><TD VALIGN="TOP">VPS: </TD>
		<TD><B>VGA Pallette Snoop Enable</B>.  Tells the device to enable
			VGA pallet snooping</TD></TR>
	<TR><TD VALIGN="TOP">MWI</TD>
		<TD><B>Memory Write and Invalidate</B>.  Enables the device to generate
			memory write and invalidate comamnds.  The cache line size must
			be set before this bit is set.</TD></TR>
	<TR><TD VALIGN="TOP">SC</TD>
		<TD><B>Special Cycle Recognition</B>.  Enables the device to monitor
			for special cycles on the bus.</TD></TR>
	<TR><TD VALIGN="TOP">BM</TD>
		<TD><B>Bus Maser Enable</B>.  Enables the device to become the bus
			master.</TD></TR>
	<TR><TD VALIGN="TOP">MA</TD>
		<TD><B>Memory Access Enable</B>.  When enabled the device responds to
			memory requests.</TD></TR>
	<TR><TD VALIGN="TOP">IO</TD>
		<TD><B>I/O Access Enable</B>.  When enabled the device responds to
			io requests.</TD></TR>

	</TABLE>

<DT><B>Status</B> - 0x06
<DD>
	<center><table BORDER><TR>
<TD>15</TD><TD>14</TD><TD>13</TD><TD>12</TD><TD>11</TD><TD>10</TD><TD>9</TD>
	<TD>8</TD><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD>
	<TD>1</TD><TD>0</TD>
</TR><TR>
<TD>DPE</TD></TD><TD>SSE</TD><TD>RMA</TD><TD>RTA</TD><TD>STA</TD>
	<TD COLSPAN=2>DT</TD><TD>DPR</TD><TD>FBBC</TD><TD>UDF</TD><TD>66</TD>
	<TD COLSPAN=5>Reserved</TD></TR>
</table></center>
	
	<TABLE>
	<TR><TD VALIGN="TOP">DPE</TD>
		<TD><B>Detect Parity Error</B>.  Set by device when it has detected a 
			parity error</TD></TR>
	<TR><TD VALIGN="TOP">SSE</TD>
		<TD><B>Signalled System Error</B>.  Set by device when it has driven
			the SERR# line</TD></TR>
	<TR><TD VALIGN="TOP">RMA</TD>
		<TD><B>Received Master-Abort</B>.  Set by master when its tranaction
			is terminated due to a master-abort.</TD></TR>
	<TR><TD VALIGN="TOP">RTA</TD>
		<TD><B>Received Target-Abort</B>.  Set by master when its tranaction
			is terminated due to a target-abort.</TD></TR>
	<TR><TD VALIGN="TOP">STA</TD>
		<TD><B>Signalled Target-Abort</B>.  Set by target when it terminates
			a tranaction by target-abort.</TD></TR>
	<TR><TD VALIGN="TOP">DT</TD>
		<TD><B>DEVSEL Timing</B>.  Read only bits whcih define the slowest
			DEVSEL# timing for the device.
				<TABLE>
				<TR><TD>00b</TD><TD>= fast</TD></TR>
				<TR><TD>01b</TD><TD>= medium</TD></TR>
				<TR><TD>10b</TD><TD>= slow</TD></TR>
				<TR><TD>11b</TD><TD>= reserved</TD></TR>
				</TABLE>
		</TD></TR>
	<TR><TD VALIGN="TOP">DPR</TD>
		<TD><B>Data Parity Reported</B>.  Set by the bus master when the 
			reporting bus master was the initator and set the PERR# itself or 
			detected it asserted by the target.</TD></TR>
	<TR><TD VALIGN="TOP">FBBC</TD>
		<TD><B>Fast Back-to-Back Capable</B>.  Indicates whether the device
			can perform fast back-to-back transfers</TD></TR>
	<TR><TD VALIGN="TOP">UDF</TD>
		<TD><B>UDF Supported</B>.  Set if the device supports user definable
			features</TD></TR>
	<TR><TD VALIGN="TOP">66</TD>
		<TD><B>66MHz Capable</B>.  Set if device can run at 66MHz.</TD></TR>
	</TABLE>

<DT><B>Revision</B> - 0x08
<DD><P>8 bit value indicating the revision of the device.</P>

<DT><B>Class Code Register</B> - 0x09
<DD><P>Specifies which type of device it is.  The class code register is
	devied up into 3 8 bit parts: Class Code, Sub-Class Code, and Prog. I/F.
</P>
		
	<TABLE>
	<TR><TD>23..16</TD><TD>Class Code</TD></TR>
	<TR><TD>15..8</TD><TD>Sub-Class Code</TD></TR>
	<TR><TD>7..0</TD><TD>Prog. I/F</TD></TR>
	</TABLE>

</P>Look at the 
<A HREF="7.c.1.html">Class Code Table</A> for a list of what these mean.</A>

</DL>
</blockquote>
<h2>Processor Implementations</h2>

<ul>
<li><a href="i386/pci.html">i386</a>
</ul>

<hr>
<!--#include virtual="/include/footer.html" -->
</BODY>
</HTML>

