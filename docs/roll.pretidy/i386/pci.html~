<HTML>
<HEAD>
<title>i386 Interupt Handling</title>
</HEAD>

<body>
<H1><CENTER>i386 Interupt Handling</center></h1>

<hr>

<h2>Interupts and the IDT</h2>

<p>The i386 processor treats hardware interrupts in the same manner as 
Exceptions and Software interupts.  Interrupt service routines are registerd
with the <A HREF="idt.html">IDT</A> and then are vectored accordingly
base on the 8259A Programmable Interrupt Controller.
</p>

<h2>The 8259A Programmable Interrupt Controller</H2>

<p>The 8259A is had 8 inputs, 1 interupt line, and a way for the proccessor to 
query it.  Each of the 8 lines are hooked up to a specific IRQ (0-7).  When
that IRQ fires the 8259A remembers which line it came in on and reaises it's
interupt line which is connected to the proccessor.  Then, by <i>magic</i>, 
the processor queries the 8259A, figures out which IRQ fired and vecorts the
correct spot in the IDT.</p>

<p>Some time ago, after the IBM XT, a brilliant engineer decided that 8 IRQs
was not enough.  Because at that time cards could not share interupts well
and they needed to maintain compatablilty with the XT, it was decided to just
chain annother 8259A off of the original one.  These days PCs have both a 
master and a slave ineterrupt controller.<p>

<h3>Programming the 8259A</h3>
<p>Each 8259A has two io ports assigned to each of them.  For simplicity
we'll call them port a and port b.  The are assigned as follows:</p>

<TABLE>
<TR><TD></TD><TH>port a</TH><TH>port b</TH></TR>
<TR><TD>Master 8259A</TD><TD>0x20</TD><TD>0x21</TD></TR>
<TR><TD>Slave 8259A</TD><TD>0xA0</TD><TD>0xA1</TD></TR>
</TABLE>

<p>The 8259A is configured throught a series of 4 control words.  To configure
it send the first word (ICW1) to port a and the rest are sent to port b.
</p>

<blockquote>
<H4>ICW1</H4>
<TABLE BORDER=1>
<TR><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD><TD>1</TD><TD>0</TD></TR>
<TR><TD>0</TD><TD>0</TD><TD>0</TD><TD>1</TD><TD>Trig</TD><TD>0</TD><TD>M/S</TD><TD>ICW4</TD></TR>
</TABLE>

<TABLE>
<TR><TD>Trig</TD><TD>0 = Edge triggered</TD><TD>1 = Level Triggered</TD></TR>
<TR><TD>M/S</TD><TD>0 = Master/Slave configuration</TD><TD>1 = Master only</TD></TR>
<TR><TD>ICW4</TD><TD>0 = No ICW4</TD><TD>1 = ICW4 will be send</TD></TR>
</TABLE>

<p><b>Sane master value:</b> 00010001b (0x11)<br>
<b>Sane slave value:</b> 00010001b (0x11)</p>

<H4>ICW2</H4>
<TABLE BORDER=1>
<TR><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD><TD>1</TD><TD>0</TD></TR>
 <TR><TD>Off 7</TD><TD>Off 6</TD><TD>Off 5</TD><TD>Off 4</TD><TD>Off 3</TD><TD>0</TD><TD>0</TD><TD>0</TD></TR>
</TABLE> 

<TABLE>
<TR><TD>Off 7 .. Off 3</TD><TD>Offeset into the IDT for interupt service routines<br>The last 3 bits are always 0 because it needs to be 3 bit alligned</TD></TR>
</TABLE>

<p><b>Sane master value:</b> 00100000b (0x20)<br>
<b>Sane slave value:</b> 00101000b (0x28)</p>


<H4>ICW3 (master)</H4>
<TABLE BORDER=1>
<TR><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD><TD>1</TD><TD>0</TD></TR>
<TR><TD>S7</TD><TD>S6</TD><TD>S5</TD><TD>S4</TD><TD>S3</TD><TD>S2</TD><TD>S1</TD><TD>S0</TD></TR>
</TABLE>
<TABLE>
<TR><TD>S7..S0</TD><TD>0 = IR Line is connected to peripheral device<BR>
			   1 = IR Line is connected to Slave 8259A</TD>
</TABLE>

<p><b>Sane master value:</b> 00000100b (0x04)<br></p>

<H4>ICW3 (slave)</H4>
<TABLE BORDER=1>     
<TR><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD><TD>1</TD><TD>0</TD></TR>                  
<TR><TD>0</TD><TD>0</TD><TD>0</TD><TD>0</TD><TD>0</TD><TD>ID2</TD><TD>ID1</TD><TD>ID0</TD></TR>          
</TABLE>                   
<TABLE>                    
<TR><TD>ID2..ID0</TD><TD>IRQ on master this slave is connected to</TD></TR>
</TABLE>                   
                           
<p><b>Sane slave value:</b> 00000010b (0x02)<br></p>

<H4>ICW4 (optional)</H4>
<TABLE BORDER=1>     
<TR><TD>7</TD><TD>6</TD><TD>5</TD><TD>4</TD><TD>3</TD><TD>2</TD><TD>1</TD><TD>0</TD></TR>                 
<TR><TD>0</TD><TD>0</TD><TD>0</TD><TD>SFNM</TD><TD>BUF</TD><TD>M/S</TD><TD>AEOI</TD><TD>Mode</TD></TR>                                        
</TABLE>     
<TABLE>
<TR><TD>SFNUM</TD><TD>0 = No Special Fully Nested Mode</TD><TD>1 = Special Fully Nested Mode</TD></TR>
<TR><TD>BUF</TD><TD>0 = No Buffered Mode</TD><TD>1 = Buffered Mode</TD></TR>
<TR><TD>M/S</TD><TD>0 = Slave PIC</TD><TD>1 = Master PIC</TD></TR>
<TR><TD>AEOI</TD><TD>0 = Manual EOI</TD><TD>1 = Automatic EOI</TD></TR>
<TR><TD>Mode</TD><TD>0 = MCS-80/85 Mode</TD><TD>1 = 8086/88 Mode</TD></TR>
</TABLE>

<p><b>Sane master value:</b> 00000101b (0x05)<br>
<b>Sane slave value:</b> 00000001b (0x01)</p>
</blockquote>

<H4>Initalization</H4>
<p>To initalize the 8259A just send the 4 ICWs to both the slave and master
like so:</p>
<PRE><TT>
/* ICW1 */
outb( 0x11, 0x20 ); /* Master port A */
outb( 0x11, 0xA0 ); /* Slave port A */

/* ICW2 */
outb( 0x20, 0x21 ); /* Master offset of 0x20 in the IDT */
outb( 0x28, 0xA1 ); /* Master offset of 0x28 in the IDT */

/* ICW3 */
outb( 0x04, 0x21 ); /* Slaves attached to IR line 2 */
outb( 0x02, 0xA1 ); /* This slave in IR line 2 of master */

/* ICW4 */
outb( 0x05, 0x21 ); /* Set as master */
outb( 0x01, 0xA1 ); /* Set as slave */

</TT></PRE>

<H4>Interrupt Mask</H4>
<p>The 8259A has the abiltiy to mask off interrupts you tell it to.  This is 
done by writting an 8 bit value corresponding to the mask to port b while the 
PIC is in normal opperation mode.  The PIC will only listen to interrupt which
have a 1 in the corresponding bit in its mask.</p>

<blockquote>
<p><b>example:</b></p>
<PRE><TT>
/* Only listen to irqs 0, 1, and 2 */
outb( 0x07, 0x21 ); /* master PIC */
outb( 0x00, 0xA1 ); /* slave PIC */
</TT></PRE>
</blockquote>

<H4>EOI</H4>
<p>When the 8259A is in Manual EOI mode (ICW4[1]==0) it will wait for an EOI
(End Of Interrput) acknowlegment to be written to it before it will send any
more.  To send the EOI simply write 0x20 to prot a of the PIC.</p>

<blockquote>
<p><b>example:</b></p>
<PRE><TT>             
/* Send EOI to both master and slave */ 
outb( 0x20, 0x20 ); /* master PIC */
outb( 0x20, 0xA0 ); /* slave PIC */
</TT></PRE>
</blockquote>
<hr>
<!--#include virtual="/include/footer.html" -->
</BODY>
</HTML>

