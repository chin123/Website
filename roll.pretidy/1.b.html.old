<HTML>
<HEAD>
<title>Using the Boot Loader</title>
</HEAD>

<body>
<H1><CENTER>Using the Boot Loader</center></h1>
<h3><center>the second part of the first chapter in our series on 
<i>How to Write an Operating System</i></center></h3>

<hr>

<h2>Booting the Kernel</h2>

<p>Once you've transferred the kernel image over to the test computer,
you need to use the 
<a href="ftp://ftp.acm.uiuc.edu/pub/sigops/boot.com">boot loader</a>
to actually get it up and running.  
</p>

<p>The syntax of the boot loader is as follows:

<br>
<pre><code>boot kernel.elf [files ...] -parameter string</code></pre>

<p>The boot loader that we use:

<ul>
<li>counts available memory
<li>loads all the files on the command line, until it sees 
either a dash or the end of the line
<li>finds the address of the parameter string from the location of the dash
<li>gives you access to all of physical memory (up to 252MB worth)
<li>creates a boot stack (for function calls and local variables)
<li>creates a boot page table, with identity mapped memory (so it looks like 
you're in physical memory mode), <b>except</b> for page 0 (this is used to 
catch null references).
<li>gives control to the first loaded file at its start address (this
file must be a statically linked a.out or ELF format executable)
</ul>

<p>When calling the start function in the first file, the boot loader
passes as parameters the amount of memory it counted, the parameter
string, and a list describing where it loaded the files into memory.
</p>

<h2>For the Curious Only</h2>

Look at some <a href="1.c.html">Technical Information about the boot 
loader</a>.

<hr>
<!--#include virtual="/include/footer.html" -->
</BODY>
</HTML>

