<HTML>
<HEAD>
<title>i386 System Calls</title>
</HEAD>

<body>
<H1><CENTER>i386 System Calls</center></h1>

<hr>

<h2>Software Interrupts</h2>

<p>Probably the easiest way to implement system calls on the i386 is via 
<i>software interrupts</i>.  If you add an 
<a href="idt.html#IDTgate">interrupt or trap gate</a>
to the IDT with a DPL of 3, an application can call this interrupt and 
it will trap into the kernel routine specified.
<p>

<p>To call this software interrupt from an application, assuming that
the software interrupt vector is 0x30:

<pre><code>void *appSysCall(void *args[]) {   
   void *appReturnValue;
   asm ("int $0x30":"=eax" (appReturnValue):"eax" ((int) args));
   return appReturnValue;
}
</code></pre>

<p>And on the system side:

<pre><code>void kernelSysCall(void *args[], struct regs r) 
{
   /*  does stuff according to args[]  */

   r.eax = returnValue;
}

/* assembler follows */

.globl asmkernelSysCall
asmkernelSysCall:
    pusha                  /* save all registers */
    pushl %eax             /* pass args[] parameter to sysCall() */
    call kernelSysCall    
    addl $4, %esp          /* remove parameter */
    popa                   /* restore registers */
    iret                   /* and return to the application */

/* assembler ends */

void initSysCall(void)
{
   setExceptionHandler(0x30, &asmkernelSysCall);
}

</code></pre>

<hr>
<!--#include virtual="/include/footer.html" -->
</BODY>
</HTML>

